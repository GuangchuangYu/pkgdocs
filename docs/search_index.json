[
["index.html", "Documents for my packages Preface", " Documents for my packages Guangchuang Yu, PhD Department of Bioinformatics, School of Basic Medical Sciences, Southern Medical Universityguangchuangyu@gmail.com 2020-08-31 Preface hello world "],
["plotbb.html", "1 Grammar of Graphics for base plot 1.1 Aesthetic mapping 1.2 Geometric layer 1.3 Setting labels 1.4 Theme 1.5 Scale 1.6 Legend 1.7 Using existing code with plotbb", " 1 Grammar of Graphics for base plot 1.1 Aesthetic mapping bb_aes() for aesthetic mapping, that equivalents to ggplot2::aes(). library(plotbb) p &lt;- bbplot(mtcars, bb_aes(mpg, disp, col=factor(cyl))) p + bb_grid(col=&#39;grey50&#39;, lty=&#39;dashed&#39;) + bb_point(pch=19) 1.2 Geometric layer p2 &lt;- p + bb_point() + bb_lm(bb_aes(group=cyl), lwd=2) p3 &lt;- p2 + bb_lm(col=&quot;red&quot;, lwd=3, lty=&#39;dotted&#39;) p4 &lt;- p + bb_text(bb_aes(label=cyl), cex=2) par(mfrow=c(1,3)) p2; p3; p4 1.2.1 Heatmap df &lt;- data.frame(x = rep(1:10, 12), y = rep(1:12, each = 10), values = rnorm(120, mean = 10, sd = 5), type = sample(LETTERS[1:5], 120, replace=TRUE), stringsAsFactors = FALSE) par(mfrow=c(2,2)) bbplot(df, bb_aes(x,y, col=values)) + bb_tile() + bb_title(&quot;heatmap for continuous numerical values&quot;) bbplot(df, bb_aes(x,y, col=values)) + bb_tile() + bb_scale_col_palette(&quot;YlOrRd&quot;) + bb_title(&quot;applying a color palette&quot;) bbplot(df, bb_aes(x,y, col=type)) + bb_tile() + bb_title(&quot;heatmap for discrete categorical values&quot;) bbplot(df, bb_aes(x,y, col=values)) + bb_tile() + bb_text(col=&#39;black&#39;) + bb_title(&quot;heatmap with text labels&quot;) + bb_theme_expand() 1.2.2 TODO bb_grid bb_point bb_lm bb_text bb_tile more layers need to be added 1.3 Setting labels p2 + bb_labs(title = &quot;hello&quot;, sub = &quot;just for demo&quot;, xlab=&quot;this is xlab&quot;, ylab = &quot;this is ylab&quot;) + bb_title(&quot;hello world&quot;) # last one rules 1.4 Theme g &lt;- p2 + bb_theme(col.main=&quot;red&quot;, cex.main=2, mar = c(4, 4, 3, 1)) + bb_title(&quot;applying graphics::par&quot;) par(mfrow=c(1,2)) print(g) p2 + bb_title(&quot;theme has no side effect&quot;) bb_theme has no side effect and will only apply to the bbplot object that it added to. This is very important for developing pre-defined themes. par(mfrow=c(1,2)) p3 + bb_theme_expand() print(p3) p + bb_grid(col=&#39;grey50&#39;, lty=&#39;dashed&#39;) + bb_point(pch=19) + bb_theme_expand() + bb_theme_grey() p + bb_point(pch=19, cex=2) + bb_theme_expand() + bb_theme_deepblue() 1.4.1 TODO bb_theme_expand bb_theme_grey bb_theme_deepblue develop more pre-defined themes 1.5 Scale bb_scale_col_palette more to be implemented 1.6 Legend Not yet implemented 1.7 Using existing code with plotbb Suppose we have existing code to plot something: plot(mtcars$mpg, mtcars$disp) abline(lm(disp ~ mpg, data=mtcars), col=&#39;red&#39;) We can wrap the codes into a function: f &lt;- function() { plot(mtcars$mpg, mtcars$disp) abline(lm(disp ~ mpg, data=mtcars), col=&#39;red&#39;) } Then we can convert it to a bbplot object. The plot produced by the function will be used as the canvas, and we can apply theme and add layers to it: library(dplyr) d &lt;- group_by(mtcars, cyl) %&gt;% summarize(xm=mean(mpg), ym=mean(disp)) pp &lt;- as.bbplot(f) + bb_theme_expand() + bb_theme_grey() + bb_lm(bb_aes(mpg, disp, group=cyl, col=factor(cyl)), data=mtcars, lwd=2, lty=&#39;dashed&#39;) + bb_point(bb_aes(xm, ym, col=factor(cyl)), data=d, pch=19, cex=2) + bb_title(&quot;hello plotbb&quot;) + bb_grid(col=&#39;grey30&#39;, lty=&#39;dashed&#39;) ## grid lines were plotted as background by default As there are many features currently not available, plotbb supports adding layers using base graphics commands that you are already familiar with. Any base graphics commands in formula, expression or function can be served as layer to be added to a bbplot object. pp + (~points(30, 400, pch=19, col=&quot;red&quot;, cex=3)) + ~text(30, 420, label=&quot;hae fun :)&quot;, col=&quot;blue&quot;, cex=1.2) "],
["ggimage.html", "2 Use image in ggplot2 2.1 geom_image 2.2 geom_pokemon 2.3 geom_emoji 2.4 geom_phylopic 2.5 geom_flag 2.6 geom_icon 2.7 geom_subview 2.8 geom_twitchemote", " 2 Use image in ggplot2 2.1 geom_image library(&quot;ggplot2&quot;) library(&quot;ggimage&quot;) set.seed(2017-02-21) img &lt;- list.files(system.file(&quot;extdata&quot;, package=&quot;ggimage&quot;), pattern=&quot;png&quot;, full.names=TRUE) d &lt;- data.frame(x = rnorm(10), y = rnorm(10), image = sample(img, size=10, replace = TRUE) ) ggplot(d, aes(x, y)) + geom_image(aes(image=image), size=.05) ggplot(d, aes(x, y)) + geom_image(aes(image=image), size=.05, by=&#39;height&#39;) ggplot(d, aes(x, y)) + geom_image(image=d$image[1]) d$size=seq(.05, .15, length.out=10) ggplot(d, aes(x, y)) + geom_image(aes(image=image, size=I(size))) ggplot(d, aes(x, y)) + geom_image(aes(image=image), color=&quot;firebrick&quot;) 2.2 geom_pokemon ggplot(d, aes(x, y)) + geom_pokemon(aes(image=ifelse(x&gt;0, &#39;pikachu&#39;, &#39;tauros&#39;)), size=.1) 2.3 geom_emoji set.seed(123) iris2 &lt;- iris[sample(1:nrow(iris), 30),] model &lt;- lm(Petal.Length ~ Sepal.Length, data=iris2) iris2$fitted &lt;- predict(model) ggplot(iris2, aes(x = Sepal.Length, y = Petal.Length)) + geom_linerange(aes(ymin = fitted, ymax = Petal.Length), colour = &quot;purple&quot;) + geom_abline(intercept = model$coefficients[1], slope = model$coefficients[2]) + geom_emoji(aes(image = ifelse(abs(Petal.Length-fitted) &gt; 0.5, &#39;1f622&#39;, &#39;1f600&#39;))) 2.4 geom_phylopic Please visit https://yulab-smu.github.io/treedata-book/chapter8.html#phylopic for more details. 2.5 geom_flag f &lt;- system.file(&quot;extdata/medals.txt&quot;, package=&quot;ggimage&quot;) medals &lt;- read.table(f, header=TRUE) p &lt;- ggplot(medals, aes(Country, count)) + geom_col(aes(fill = medal), width = .8) p + geom_flag(y = -2, aes(image = code)) + coord_flip() + expand_limits(y = -2) + scale_fill_manual(values = c(&quot;Gold&quot; = &quot;gold&quot;, &quot;Bronze&quot; = &quot;#cd7f32&quot;, &quot;Silver&quot; = &quot;#C0C0C0&quot;)) 2.6 geom_icon d$icon=sample(c(&#39;ios-power&#39;, &#39;ios-wifi&#39;, &#39;ios-pie&#39;), 10, replace=TRUE) ggplot(d, aes(x,y)) + geom_icon(aes(image=icon)) see also https://ionicons.com/. 2.7 geom_subview library(tibble) dd &lt;- data.frame(x=LETTERS[1:3], y=1:3) pie &lt;- ggplot(dd, aes(x=1, y, fill=x)) + geom_bar(stat=&quot;identity&quot;, width=1) + coord_polar(theta=&quot;y&quot;) + theme_void() + theme(legend.position=&quot;none&quot;) + theme_transparent() df &lt;- tibble(x = sample(2:9), y = sample(2:9), width = sample(seq(0.5, 3, length.out=length(x))), pie = list(pie)) p &lt;- ggplot(data=data.frame(x=c(0, 10), y=c(0, 10)), aes(x, y))+geom_blank() p + geom_subview(aes(x=x, y=y, subview=pie, width=width, height=width), data=df) 2.8 geom_twitchemote set.seed(1) x &lt;- 1:10 y &lt;- x + rnorm(10, sd = 1) notlikethis &lt;- data.frame(x = x, y = y) n_pals &lt;- 200 pals &lt;- data.frame( x = runif(n_pals, -2, 12), y = runif(n_pals, -2, 12), pal = sample(c(&quot;wutface&quot;, &quot;kappa&quot;, &quot;pogchamp&quot;), size = n_pals, replace = TRUE) ) ggplot(notlikethis, aes(x = x, y = y)) + geom_twitchemote(data = pals, aes(image = &#39;pogchamp&#39;), size = 0.03, alpha = 0.3) + geom_twitchemote(aes(image = &#39;notlikethis&#39;), size = 0.15) + geom_smooth() "],
["plot-everything-in-ggplot.html", "3 Plot everything in ggplot", " 3 Plot everything in ggplot require(ggplotify) require(magick) img &lt;- magick::image_graph(600, 600, res = 96) invisible(lapply(seq(1, 360, length.out=30), function(angle) { print(as.ggplot(~barplot(1:5), angle=-angle, scale = 1-angle/360)) })) grDevices::dev.off() animation &lt;- magick::image_animate(img, fps = 2) magick::image_write(animation, &quot;rotate-scale.gif&quot;) "],
["aplot.html", "4 Align Associated plots 4.1 Reconcile axis limits 4.2 Align associated subplots", " 4 Align Associated plots For many times, we are not just aligning plots as what cowplot and patchwork did. We would like to align associated information that requires axes to be exactly matched in subplots. 4.1 Reconcile axis limits Suppose we have the following plots and would like to combine them in a single page. library(dplyr) library(ggplot2) library(ggstance) library(ggtree) library(patchwork) library(aplot) no_legend=theme(legend.position=&#39;none&#39;) d &lt;- group_by(mtcars, cyl) %&gt;% summarize(mean=mean(disp), sd=sd(disp)) d2 &lt;- dplyr::filter(mtcars, cyl != 8) %&gt;% rename(var = cyl) p1 &lt;- ggplot(d, aes(x=cyl, y=mean)) + geom_col(aes(fill=factor(cyl)), width=1) + no_legend p2 &lt;- ggplot(d2, aes(var, disp)) + geom_jitter(aes(color=factor(var)), width=.5) + no_legend p3 &lt;- ggplot(filter(d, cyl != 4), aes(mean, cyl)) + geom_colh(aes(fill=factor(cyl)), width=.6) + coord_flip() + no_legend pp &lt;- list(p1, p2, p3) We can use cowplot or patchwork to combine plots. plot_list(pp, ncol=1) However, these plots do not align properly (Figure 4.1A). There are two reasons: the plotted data have different limits the different plots have different amounts of expansion spaces To address these two issues, ggtree provides xlim2() and ylim2() functions to set x or y limits1. It use input limits to set axis limits that is similar to xlim() and ylim() (Figure 4.1B). If limits = NULL (by default), the xlim2() and ylim2() functions will calculate axis limits from input ggplot object. So that we can easily set limits of a ggplot object based on another ggplot object to uniformize their limits (Figure 4.1C). pp2 &lt;- lapply(pp, function(p) p + xlim2(limits=c(3, 11))) pp3 &lt;- lapply(pp, function(p) p + xlim2(p1)) plot_list(pp2, ncol=1) plot_list(pp3, ncol=1) If the plot was flipped, it will throw a message and apply the another axis. In this example, the x limit of p1 is applied to y limit of p3 as p3 was flipped. Figure 4.1: Setting x-axis limits for aligning plots. Composite plot that does not align properly (A column), align based on user specific limits (B column), and align based on xlim of the p1 object (C column). Similarly, we can use ylim2() to reconcile y axis. As we can see in Figure 4.2, only panel A and C were aligned properly. library(ggstance) p &lt;- ggplot(mtcars, aes(disp, cyl, group=cyl)) + geom_boxploth() p1 &lt;- ggplot(subset(mtcars, cyl!=8), aes(disp, cyl, group=cyl)) + geom_point() p2 &lt;- p1 + ylim2(p) p + p1 + p2 + plot_annotation(tag_levels=&quot;A&quot;) Figure 4.2: Setting y-axis limits for aligning plots. Composite plot that does not align properly (A vs B), and align based on ylim of the p object (A vs C). 4.2 Align associated subplots With xlim2() and ylim2(), it is easy to align associated subplots to annotate a main figure. The aplot package provides insert_left(), insert_right(), insert_top() and insert_bottom() as shortcut to help users aligning subplots. 4.2.1 A first glance library(ggplot2) library(aplot) p &lt;- ggplot(mtcars, aes(mpg, disp)) + geom_point() p2 &lt;- ggplot(mtcars, aes(mpg)) + geom_density(fill=&#39;steelblue&#39;, alpha=.5) + ggtree::theme_dendrogram() p3 &lt;- ggplot(mtcars, aes(x=1, y=disp)) + geom_boxplot(fill=&#39;firebrick&#39;, alpha=.5) + theme_void() ap &lt;- p %&gt;% insert_top(p2, height=.3) %&gt;% insert_right(p3, width=.1) ## you can use `ggsave(filename=&quot;aplot.png&quot;, plot=ap)` to export the plot to image file print(ap) # or just type ap will print the figure 4.2.2 Aligning plots with a tree Aligning a plot with a tree is difficult, as it requres expertise to extract the order of taxa on the tree. library(ggtree) set.seed(2020-03-27) x &lt;- rtree(10) d &lt;- data.frame(taxa=x$tip.label, value = abs(rnorm(10))) p &lt;- ggtree(x) + geom_tiplab(align = TRUE) + xlim(NA, 3) library(ggstance) p2 &lt;- ggplot(d, aes(value, taxa)) + geom_colh() + scale_x_continuous(expand=c(0,0)) library(patchwork) p | p2 Althought patchwork did a good job at aligning y-axes among the two plots, the output is not what we want if the bar heights are associated with external nodes on the tree. It is not so obvious for an ordinary user to extract the order of tip label from the tree to re-draw the barplot. If we insert a ggtree object in aplot, it will transform other plots in the same row (insert_left and insert_right) or same column (insert_top and insert_bottom) based on the tree structure. p2 %&gt;% insert_left(p) Example from https://github.com/YuLab-SMU/ggtree/issues/339. require(ggtree) require(ggplot2) require(dplyr) require(gggenes) tree &lt;- read.tree(&quot;data/nbh.nwk&quot;) nbh &lt;- read.csv(&quot;data/nbh.csv&quot;) tree_plot &lt;- ggtree(tree) + geom_tiplab(aes(label=label)) nbh_plot &lt;- ggplot( (nbh %&gt;% select(label, block_id,pid,start,end,strand) %&gt;% distinct()), aes(xmin = start, xmax = end, y = block_id, forward = strand) # as_factor(block_id) ) + geom_gene_arrow() + #scale_fill_brewer(palette = &quot;Set3&quot;) + theme_genes() %+replace% theme(panel.grid.major.y = element_line(colour = NULL)) + # , linetype = &quot;dotted&quot;)) + #theme_classic() + theme( axis.title.x=element_blank(), #axis.text.x=element_blank(), axis.ticks.x=element_blank(), #axis.line.x = element_blank(), axis.title.y=element_blank(), #axis.text.y=element_blank(), axis.ticks.y=element_blank(), axis.line.y = element_blank() ) require(aplot) insert_left(nbh_plot, tree_plot) Example from https://github.com/YuLab-SMU/ggtree/issues/313. set.seed(20200618) ## Create a random tree tre &lt;- rtree(10) tre$tip.label &lt;- letters[1:10] ## Build matrix with some random numbers in long format so can be plotted as &quot;heatmap&quot; using geom_tile gmat &lt;- expand.grid(x = letters[1:10], y = letters[1:10]) gmat$v &lt;- rexp(100, rate=.1) ## Generate some reandom numbres for a line plot gline &lt;- tibble(x = letters[1:10], y = rnorm(10, 10, 2)) ## Generate some random percentages for a bar plot gbar &lt;- tibble(x = letters[1:10], y = round(runif(10) * 100,1)) ## Construct ggtree ptre &lt;- ggtree(tre) + geom_tiplab() + geom_nodepoint(colour = &#39;firebrick&#39;, size=3) ## Constuct companion plots pmat &lt;- ggplot(gmat, aes(x,y, fill=v)) + geom_tile() pbar &lt;- ggplot(gbar, aes(x,y)) + geom_col() + coord_flip() + ylab(NULL) pline &lt;- ggplot(gline, aes(x,y)) + geom_line(aes(group = 1)) + geom_point() + coord_flip() cowplot::plot_grid(ptre, pmat, pbar, pline, ncol=4) library(aplot) pmat %&gt;% insert_left(ptre) %&gt;% insert_right(pbar) %&gt;% insert_right(pline) 4.2.3 Creating annotated heatmap The xlim2() and ylim2() functions create many possibilities to align figures. For instance, we can add column and row annotations around a heatmap in all sides (top, bottom, left and right). They can be aligned properly with the aids of xlim2() and ylim2() even with missing values presented as demonstrated in Figure 4.3. library(tidyr) library(ggplot2) library(ggtree) set.seed(2019-11-07) d &lt;- matrix(rnorm(25), ncol=5) rownames(d) &lt;- paste0(&#39;g&#39;, 1:5) colnames(d) &lt;- paste0(&#39;t&#39;, 1:5) hc &lt;- hclust(dist(d)) hcc &lt;- hclust(dist(t(d))) phr &lt;- ggtree(hc) phc &lt;- ggtree(hcc) + layout_dendrogram() d &lt;- data.frame(d) d$gene &lt;- rownames(d) dd &lt;- gather(d, 1:5, key=&quot;condition&quot;, value=&#39;expr&#39;) p &lt;- ggplot(dd, aes(condition,gene, fill=expr)) + geom_tile() + scale_fill_viridis_c() + scale_y_discrete(position=&quot;right&quot;) + theme_minimal() + xlab(NULL) + ylab(NULL) g &lt;- ggplot(dplyr::filter(dd, gene != &#39;g2&#39;), aes(gene, expr, fill=gene)) + geom_boxplot() + coord_flip() + scale_fill_brewer(palette = &#39;Set1&#39;) + theme_minimal() + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), panel.grid.minor = element_blank(), panel.grid.major.y = element_blank()) + xlab(NULL) + ylab(NULL) ca &lt;- data.frame(condition = paste0(&#39;t&#39;, 1:5), A1 = rep(LETTERS[1:2], times=c(3, 2)), A2 = rep(letters[3:5], times=c(1, 3, 1)) ) cad &lt;- gather(ca, A1, A2, key=&#39;anno&#39;, value=&#39;type&#39;) pc &lt;- ggplot(cad, aes(condition, y=anno, fill=type)) + geom_tile() + scale_y_discrete(position=&quot;right&quot;) + theme_minimal() + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) + xlab(NULL) + ylab(NULL) set.seed(123) dp &lt;- data.frame(gene=factor(rep(paste0(&#39;g&#39;, 1:5), 2)), pathway = sample(paste0(&#39;pathway&#39;, 1:5), 10, replace = TRUE)) pp &lt;- ggplot(dp, aes(pathway, gene)) + geom_point(size=5, color=&#39;steelblue&#39;) + theme_minimal() + theme(axis.text.x=element_text(angle=90, hjust=0), axis.text.y = element_blank(), axis.ticks.y = element_blank()) + xlab(NULL) + ylab(NULL) p %&gt;% insert_left(phr, width=.3) %&gt;% insert_right(pp, width=.4) %&gt;% insert_right(g, width=.4) %&gt;% insert_top(pc, height=.1) %&gt;% insert_top(phc, height=.2) Figure 4.3: Create complex heatmap. With the helps of xlim2() and ylim2(), it is easy to align row or column annotations around a figure (e.g. a heatmap). 4.2.4 A single cell example Example taken from https://davemcg.github.io/post/lets-plot-scrna-dotplots/ library(readr) library(tidyr) library(dplyr) library(ggplot2) library(ggtree) file &lt;- system.file(&quot;extdata&quot;, &quot;scRNA_dotplot_data.tsv.gz&quot;, package=&quot;aplot&quot;) gene_cluster &lt;- readr::read_tsv(file) dot_plot &lt;- gene_cluster %&gt;% mutate(`% Expressing` = (cell_exp_ct/cell_ct) * 100) %&gt;% filter(count &gt; 0, `% Expressing` &gt; 1) %&gt;% ggplot(aes(x=cluster, y = Gene, color = count, size = `% Expressing`)) + geom_point() + cowplot::theme_cowplot() + theme(axis.line = element_blank()) + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab(NULL) + theme(axis.ticks = element_blank()) + scale_color_gradientn(colours = viridis::viridis(20), limits = c(0,4), oob = scales::squish, name = &#39;log2 (count + 1)&#39;) + scale_y_discrete(position = &quot;right&quot;) mat &lt;- gene_cluster %&gt;% select(-cell_ct, -cell_exp_ct, -Group) %&gt;% # drop unused columns to faciliate widening pivot_wider(names_from = cluster, values_from = count) %&gt;% data.frame() # make df as tibbles -&gt; matrix annoying row.names(mat) &lt;- mat$Gene # put gene in `row` mat &lt;- mat[,-1] #drop gene column as now in rows clust &lt;- hclust(dist(mat %&gt;% as.matrix())) # hclust with distance matrix ggtree_plot &lt;- ggtree::ggtree(clust) v_clust &lt;- hclust(dist(mat %&gt;% as.matrix() %&gt;% t())) ggtree_plot_col &lt;- ggtree(v_clust) + layout_dendrogram() labels= ggplot(gene_cluster, aes(cluster, y=1, fill=Group)) + geom_tile() + scale_fill_brewer(palette = &#39;Set1&#39;,name=&quot;Cell Type&quot;) + theme_void() library(patchwork) ggtree_plot | dot_plot | (ggtree_plot_col / labels) library(aplot) ## the rows of the dot_plot was automatically reorder based on the tree dot_plot %&gt;% insert_left(ggtree_plot, width=.2) ## the columns of the dot_plot was automatically reorder based on the tree dot_plot %&gt;% insert_left(ggtree_plot, width=.2) %&gt;% insert_top(labels, height=.02) %&gt;% insert_top(ggtree_plot_col, height=.1) the implementation was inspired by https://thackl.github.io/ggtree-composite-plots↩︎ "]
]
