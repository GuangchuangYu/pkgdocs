[
["index.html", "Documents for my packages Preface", " Documents for my packages Guangchuang Yu, PhD Department of Bioinformatics, School of Basic Medical Sciences, Southern Medical Universityguangchuangyu@gmail.com 2020-01-06 Preface hello world "],
["plotbb.html", "1 Grammar of Graphics for base plot 1.1 Aesthetic mapping 1.2 Geometric layer 1.3 Setting labels 1.4 Theme 1.5 Scale 1.6 Legend 1.7 Using existing code with plotbb", " 1 Grammar of Graphics for base plot 1.1 Aesthetic mapping bb_aes() for aesthetic mapping, that equivalents to ggplot2::aes(). library(plotbb) p &lt;- bbplot(mtcars, bb_aes(mpg, disp, col=factor(cyl))) p + bb_grid(col=&#39;grey50&#39;, lty=&#39;dashed&#39;) + bb_point(pch=19) 1.2 Geometric layer p2 &lt;- p + bb_point() + bb_lm(bb_aes(group=cyl), lwd=2) p3 &lt;- p2 + bb_lm(col=&quot;red&quot;, lwd=3, lty=&#39;dotted&#39;) p4 &lt;- p + bb_text(bb_aes(label=cyl), cex=2) par(mfrow=c(1,3)) p2; p3; p4 1.2.1 Heatmap df &lt;- data.frame(x = rep(1:10, 12), y = rep(1:12, each = 10), values = rnorm(120, mean = 10, sd = 5), type = sample(LETTERS[1:5], 120, replace=TRUE), stringsAsFactors = FALSE) par(mfrow=c(2,2)) bbplot(df, bb_aes(x,y, col=values)) + bb_tile() + bb_title(&quot;heatmap for continuous numerical values&quot;) bbplot(df, bb_aes(x,y, col=values)) + bb_tile() + bb_scale_col_palette(&quot;YlOrRd&quot;) + bb_title(&quot;applying a color palette&quot;) bbplot(df, bb_aes(x,y, col=type)) + bb_tile() + bb_title(&quot;heatmap for discrete categorical values&quot;) bbplot(df, bb_aes(x,y, col=values)) + bb_tile() + bb_text() + bb_title(&quot;heatmap with text labels&quot;) + bb_theme_expand() 1.2.2 TODO bb_grid bb_point bb_lm bb_text bb_tile more layers need to be added 1.3 Setting labels p2 + bb_labs(title = &quot;hello&quot;, sub = &quot;just for demo&quot;, xlab=&quot;this is xlab&quot;, ylab = &quot;this is ylab&quot;) + bb_title(&quot;hello world&quot;) # last one rules 1.4 Theme g &lt;- p2 + bb_theme(col.main=&quot;red&quot;, cex.main=2, mar = c(4, 4, 3, 1)) + bb_title(&quot;applying graphics::par&quot;) par(mfrow=c(1,2)) print(g) p2 + bb_title(&quot;theme has no side effect&quot;) bb_theme has no side effect and will only apply to the bbplot object that it added to. This is very important for developing pre-defined themes. par(mfrow=c(1,2)) p3 + bb_theme_expand() print(p3) p + bb_grid(col=&#39;grey50&#39;, lty=&#39;dashed&#39;) + bb_point(pch=19) + bb_theme_expand() + bb_theme_grey() p + bb_point(pch=19, cex=2) + bb_theme_expand() + bb_theme_deepblue() 1.4.1 TODO bb_theme_expand bb_theme_grey bb_theme_deepblue develop more pre-defined themes 1.5 Scale bb_scale_col_palette more to be implemented 1.6 Legend Not yet implemented 1.7 Using existing code with plotbb Suppose we have existing code to plot something: plot(mtcars$mpg, mtcars$disp) abline(lm(disp ~ mpg, data=mtcars), col=&#39;red&#39;) We can wrap the codes into a function: f &lt;- function() { plot(mtcars$mpg, mtcars$disp) abline(lm(disp ~ mpg, data=mtcars), col=&#39;red&#39;) } Then we can convert it to a bbplot object. The plot produced by the function will be used as the canvas, and we can apply theme and add layers to it: library(dplyr) d &lt;- group_by(mtcars, cyl) %&gt;% summarize(xm=mean(mpg), ym=mean(disp)) pp &lt;- as.bbplot(f) + bb_theme_expand() + bb_theme_grey() + bb_lm(bb_aes(mpg, disp, group=cyl, col=factor(cyl)), data=mtcars, lwd=2, lty=&#39;dashed&#39;) + bb_point(bb_aes(xm, ym, col=factor(cyl)), data=d, pch=19, cex=2) + bb_title(&quot;hello plotbb&quot;) + bb_grid(col=&#39;grey30&#39;, lty=&#39;dashed&#39;) ## grid lines were plotted as background by default As there are many features currently not available, plotbb supports adding layers using base graphics commands that you are already familiar with. Any base graphics commands in formula, expression or function can be served as layer to be added to a bbplot object. pp + (~points(30, 400, pch=19, col=&quot;red&quot;, cex=3)) + ~text(30, 420, label=&quot;hae fun :)&quot;, col=&quot;blue&quot;, cex=1.2) "],
["ggimage.html", "2 Use image in ggplot2 2.1 geom_image 2.2 geom_pokemon 2.3 geom_emoji 2.4 geom_phylopic 2.5 geom_flag 2.6 geom_icon 2.7 geom_subview 2.8 geom_twitchemote", " 2 Use image in ggplot2 2.1 geom_image library(&quot;ggplot2&quot;) library(&quot;ggimage&quot;) set.seed(2017-02-21) img &lt;- list.files(system.file(&quot;extdata&quot;, package=&quot;ggimage&quot;), pattern=&quot;png&quot;, full.names=TRUE) d &lt;- data.frame(x = rnorm(10), y = rnorm(10), image = sample(img, size=10, replace = TRUE) ) ggplot(d, aes(x, y)) + geom_image(aes(image=image), size=.05) ggplot(d, aes(x, y)) + geom_image(aes(image=image), size=.05, by=&#39;height&#39;) ggplot(d, aes(x, y)) + geom_image(image=d$image[1]) d$size=seq(.05, .15, length.out=10) ggplot(d, aes(x, y)) + geom_image(aes(image=image, size=I(size))) ggplot(d, aes(x, y)) + geom_image(aes(image=image), color=&quot;firebrick&quot;) 2.2 geom_pokemon ggplot(d, aes(x, y)) + geom_pokemon(aes(image=ifelse(x&gt;0, &#39;pikachu&#39;, &#39;tauros&#39;)), size=.1) 2.3 geom_emoji set.seed(123) iris2 &lt;- iris[sample(1:nrow(iris), 30),] model &lt;- lm(Petal.Length ~ Sepal.Length, data=iris2) iris2$fitted &lt;- predict(model) ggplot(iris2, aes(x = Sepal.Length, y = Petal.Length)) + geom_linerange(aes(ymin = fitted, ymax = Petal.Length), colour = &quot;purple&quot;) + geom_abline(intercept = model$coefficients[1], slope = model$coefficients[2]) + geom_emoji(aes(image = ifelse(abs(Petal.Length-fitted) &gt; 0.5, &#39;1f622&#39;, &#39;1f600&#39;))) 2.4 geom_phylopic Please visit https://yulab-smu.github.io/treedata-book/chapter8.html#phylopic for more details. 2.5 geom_flag f &lt;- system.file(&quot;extdata/medals.txt&quot;, package=&quot;ggimage&quot;) medals &lt;- read.table(f, header=TRUE) p &lt;- ggplot(medals, aes(Country, count)) + geom_col(aes(fill = medal), width = .8) p + geom_flag(y = -2, aes(image = code)) + coord_flip() + expand_limits(y = -2) + scale_fill_manual(values = c(&quot;Gold&quot; = &quot;gold&quot;, &quot;Bronze&quot; = &quot;#cd7f32&quot;, &quot;Silver&quot; = &quot;#C0C0C0&quot;)) 2.6 geom_icon d$icon=sample(c(&#39;ios-power&#39;, &#39;ios-wifi&#39;, &#39;ios-pie&#39;), 10, replace=TRUE) ggplot(d, aes(x,y)) + geom_icon(aes(image=icon)) see also https://ionicons.com/. 2.7 geom_subview library(tibble) dd &lt;- data.frame(x=LETTERS[1:3], y=1:3) pie &lt;- ggplot(dd, aes(x=1, y, fill=x)) + geom_bar(stat=&quot;identity&quot;, width=1) + coord_polar(theta=&quot;y&quot;) + theme_void() + theme(legend.position=&quot;none&quot;) + theme_transparent() df &lt;- tibble(x = sample(2:9), y = sample(2:9), width = sample(seq(0.5, 3, length.out=length(x))), pie = list(pie)) p &lt;- ggplot(data=data.frame(x=c(0, 10), y=c(0, 10)), aes(x, y))+geom_blank() p + geom_subview(aes(x=x, y=y, subview=pie, width=width, height=width), data=df) 2.8 geom_twitchemote set.seed(1) x &lt;- 1:10 y &lt;- x + rnorm(10, sd = 1) notlikethis &lt;- data.frame(x = x, y = y) n_pals &lt;- 200 pals &lt;- data.frame( x = runif(n_pals, -2, 12), y = runif(n_pals, -2, 12), pal = sample(c(&quot;wutface&quot;, &quot;kappa&quot;, &quot;pogchamp&quot;), size = n_pals, replace = TRUE) ) ggplot(notlikethis, aes(x = x, y = y)) + geom_twitchemote(data = pals, aes(image = &#39;pogchamp&#39;), size = 0.03, alpha = 0.3) + geom_twitchemote(aes(image = &#39;notlikethis&#39;), size = 0.15) + geom_smooth() "]
]
